package com.example.Employee.Management.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import jakarta.persistence.*;

import java.util.List;

/**
 * Represents a Department in the organization.
 * This class is mapped to the 'departments' table in the database.
 * A department can have multiple employees associated with it.
 */
@Entity  // Specifies that this is an entity class to be mapped to a database table
public class Department {

    /**
     * Unique identifier for the department.
     * This field is auto-generated by the database.
     */
    @Id  // Marks this field as the primary key of the entity
    @GeneratedValue(strategy = GenerationType.IDENTITY)  // Specifies how the ID should be generated (auto-incremented)
    private Long id;

    /**
     * Name of the department (e.g., HR, IT, Sales, etc.)
     */
    private String name;

    /**
     * List of employees associated with the department.
     * This field is excluded from JSON serialization to prevent infinite recursion when retrieving employees.
     */
    @JsonIgnore  // Prevents this list from being included in the serialized JSON response
    @OneToMany(mappedBy = "department")  // Defines a one-to-many relationship with the Employee entity
    private List<Employee> employees;

    /**
     * Gets the ID of the department.
     *
     * @return the ID of the department
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the ID of the department.
     *
     * @param id the ID to set for the department
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the name of the department.
     *
     * @return the name of the department
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name of the department.
     *
     * @param name the name to set for the department
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Gets the list of employees that belong to this department.
     *
     * @return a list of employees in the department
     */
    public List<Employee> getEmployees() {
        return employees;
    }

    /**
     * Sets the list of employees for this department.
     *
     * @param employees the list of employees to set for the department
     */
    public void setEmployees(List<Employee> employees) {
        this.employees = employees;
    }
}
